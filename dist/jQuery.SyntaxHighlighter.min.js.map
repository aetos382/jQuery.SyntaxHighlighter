{"version":3,"sources":["jQuery.SyntaxHighlighter.js","../jQuery.SyntaxHighlighter.ts"],"names":["root","factory","module","exports","highlighter","require","HighlightElement","SyntaxHighlight","define","amd","$","jQuery","this","JQuerySyntaxHighlighter","JQuerySyntaxHighlighter.Highlighter","JQuerySyntaxHighlighter.Highlighter.constructor","JQuerySyntaxHighlighter.Highlighter.Setup","each","index","element","Highlighter","brush","config","autoHighlight","JQuerySyntaxHighlighter.Highlighter.HighlightElement","JQuerySyntaxHighlighter.Highlighter.getClasses","Setup"],"mappings":"CAAC,SAAUA,EAAMC,GACb,GAAqB,gBAAVC,SAA+C,gBAAlBA,QAAOC,QAAqB,CAChE,GAAIC,GAAcH,EAAQI,QAAQ,UAClCH,QAAOC,QAAU,WAETC,EAAYE,sBAEjB,IAAsB,gBAAXH,SAAqB,CACnC,GAAIC,GAAcH,EAAQI,QAAQ,UAClCF,SAAQI,gBAAkBH,EAAYE,qBACnC,IAAqB,kBAAVE,SAAwBA,OAAOC,IAC7CD,QAAQ,UAAW,SAAUE,GACzB,GAAIN,GAAcH,EAAQS,EAC1B,OAAO,YAECN,EAAYE,wBAGrB,CACH,GAAIF,GAAcH,EAAQU,OAC1BX,GAAKO,gBAAkBH,EAAYE,mBAEzCM,KAAM,SAAUF,GCpBlB,GAAOG,EDmGH,OCnGJ,UAAOA,GAyBHA,GAAaA,GAAWA,WAyBpBC,QAzBSA,GAyBGA,EAAiBA,EAAeA,EAAwBA,GAEhEC,KAAKA,QAAUA,EACfA,KAAKA,MAAQA,EACbA,KAAKA,OAASA,EACdA,KAAKA,cAAkCA,QAAjBA,GAA6BA,EAAOA,EAkElED,MA9DkBA,GAAAA,MAAdA,SAAoBA,GAEhBE,EAAYA,EAAIA,EAEhBA,EAAEA,GAAGA,gBAAkBA,SAAUA,EAAeA,EAAwBA,GACpE,MAAOJ,MAAKK,KAAK,SAACC,EAAeC,GAC7BC,EAAYd,iBAAiBI,EAAES,GAAUE,EAAOC,EAAQC,OAMtDT,EAAAA,iBAAdA,SAA+BA,EAAiBA,EAAeA,EAAwBA,GAEnFU,GAAIA,GAAcA,GAAIA,GAAYA,EAAEA,GAAUA,EAAOA,EAAQA,EAC7DA,GAAYA,oBAITV,EAAAA,UAAAA,iBAAPA,WAAAU,GAAAA,GAAAA,KAEQA,EAAUA,KAAKA,YACnBA,GAAQA,QAAQA,SAAWA,KAAKA,OAEhCA,EAAYA,EAAEA,KAAKA,EAASA,SAACA,EAAeA,GAAkBA,MAAAA,GAAKA,QAAQA,SAASA,KAEhFA,KAAKA,eACLA,kBAAkBA,UAAUA,KAAMA,KAAKA,QAAQA,KAK/CV,EAAAA,UAAAA,WAARA,WAAAW,GAAAA,GAAAA,KAEQA,IA0BJA,OAxBIA,MAAKA,QACLA,EAAYA,EAAEA,KAAKA,KAAKA,OAAQA,SAACA,EAAcA,GAC3CA,GACIA,GADAA,EAAIA,EAAYA,QAAQA,EAKpBA,GAFCA,QAALA,EACqBA,kBAAVA,GACHA,EAAMA,EAAKA,SAGXA,EAAOA,IAAMA,EAGHA,kBAANA,GACRA,EAAEA,GAGFA,EAAIA,IAAMA,EAGlBA,EAAQA,KAAKA,KAIdA,GA5FIX,EAAAA,SACXA,UAAgBA,aAChBA,UAAgBA,aAChBA,SAAgBA,WAChBA,UAAgBA,aAChBA,OAAgBA,SAChBA,UAAgBA,SAACA,GAA4BA,MAAAA,cAAgBA,EAAMA,KAAKA,KAAOA,KAC/EA,WAAgBA,cAChBA,MAAgBA,QAChBA,eAAgBA,mBAChBA,UAAgBA,aAChBA,UAAgBA,aAChBA,QAAgBA,WAChBA,MAAgBA,QAChBA,QAAgBA,WAgFxBA,IAhGaD,GAAAA,YAAAA,GAzBVA,IAAAA,ODkGHA,EAAwBO,YAAYM,MAAMhB,GACnCG,EAAwBO","file":"jQuery.SyntaxHighlighter.min.js","sourcesContent":["(function (root, factory) {\n    if (typeof module == 'object' && typeof module.exports == 'object') {\n        var highlighter = factory(require('jquery'));\n        module.exports = function () {\n            SyntaxHighlight:\n                highlighter.HighlightElement;\n        };\n    } else if (typeof exports == 'object') {\n        var highlighter = factory(require('jquery'));\n        exports.SyntaxHighlight = highlighter.HighlightElement;\n    } else if (typeof define == 'function' && define.amd) {\n        define(['jquery'], function ($) {\n            var highlighter = factory($);\n            return function () {\n                SyntaxHighlight:\n                    highlighter.HighlightElement;\n            };\n        });\n    } else {\n        var highlighter = factory(jQuery);\n        root.SyntaxHighlight = highlighter.HighlightElement;\n    }\n}(this, function ($) {\n    var JQuerySyntaxHighlighter;\n    (function (JQuerySyntaxHighlighter) {\n        var Highlighter = function () {\n            function Highlighter(element, brush, config, autoHighlight) {\n                this.element = element;\n                this.brush = brush;\n                this.config = config;\n                this.autoHighlight = autoHighlight == undefined ? true : autoHighlight;\n            }\n            Highlighter.Setup = function ($) {\n                Highlighter.$ = $;\n                $.fn.SyntaxHighlight = function (brush, config, autoHighlight) {\n                    return this.each(function (index, element) {\n                        Highlighter.HighlightElement($(element), brush, config, autoHighlight);\n                    });\n                };\n            };\n            Highlighter.HighlightElement = function (element, brush, config, autoHighlight) {\n                var highlighter = new Highlighter($(element), brush, config, autoHighlight);\n                highlighter.HighlightElement();\n            };\n            Highlighter.prototype.HighlightElement = function () {\n                var _this = this;\n                var classes = this.getClasses();\n                classes.unshift('brush:' + this.brush);\n                Highlighter.$.each(classes, function (index, value) {\n                    return _this.element.addClass(value);\n                });\n                if (this.autoHighlight) {\n                    SyntaxHighlighter.highlight(null, this.element[0]);\n                }\n            };\n            Highlighter.prototype.getClasses = function () {\n                var _this = this;\n                var classes = [];\n                if (this.config) {\n                    Highlighter.$.each(this.config, function (name, value) {\n                        var x = Highlighter.options[name];\n                        var c;\n                        if (x == undefined) {\n                            if (typeof value === 'function') {\n                                c = value(_this.element);\n                            } else {\n                                c = name + ':' + value;\n                            }\n                        } else if (typeof x === 'function') {\n                            c = x(value);\n                        } else {\n                            c = x + ':' + value;\n                        }\n                        classes.push(c);\n                    });\n                }\n                return classes;\n            };\n            Highlighter.options = {\n                autoLinks: 'auto-links',\n                className: 'class-name',\n                collapse: 'collapse',\n                firstLine: 'first-line',\n                gutter: 'gutter',\n                highlight: function (value) {\n                    return 'highlight:[' + value.join(',') + ']';\n                },\n                htmlScript: 'html-script',\n                light: 'light',\n                padLineNumbers: 'pad-line-numbers',\n                quickCode: 'quick-code',\n                smartTabs: 'smart-tabs',\n                tabSize: 'tab-size',\n                title: 'title',\n                toolbar: 'toolbar'\n            };\n            return Highlighter;\n        }();\n        JQuerySyntaxHighlighter.Highlighter = Highlighter;\n    }(JQuerySyntaxHighlighter || (JQuerySyntaxHighlighter = {})));\n    JQuerySyntaxHighlighter.Highlighter.Setup($);\n    return JQuerySyntaxHighlighter.Highlighter;\n}));","/// <reference path=\"typings/jquery/jquery.d.ts\"/>\r\n\r\nmodule JQuerySyntaxHighlighter {\r\n    \r\n    interface sh {\r\n        highlight(params: any, element: HTMLElement);\r\n    }\r\n    \r\n    declare var SyntaxHighlighter: sh;\r\n    \r\n    export interface Configuration {\r\n        autoLinks:      boolean;\r\n        className:      string;\r\n        collapse:       boolean;\r\n        firstLine:      number;\r\n        gutter:         boolean;\r\n        highlight:      number[];\r\n        htmlScript:     boolean;\r\n        light:          boolean;\r\n        padLineNumbers: boolean | number;\r\n        quickCode:      boolean;\r\n        smartTabs:      boolean;\r\n        tabSize:        number;\r\n        title:          string;\r\n        toolbar:        boolean;\r\n    }\r\n    \r\n    export class Highlighter {\r\n        \r\n        private static options = {\r\n            autoLinks:      \"auto-links\",\r\n            className:      \"class-name\",\r\n            collapse:       \"collapse\",\r\n            firstLine:      \"first-line\",\r\n            gutter:         \"gutter\",\r\n            highlight:      (value: number[]): string => \"highlight:[\" + value.join(\",\") + \"]\",\r\n            htmlScript:     \"html-script\",\r\n            light:          \"light\",\r\n            padLineNumbers: \"pad-line-numbers\",\r\n            quickCode:      \"quick-code\",\r\n            smartTabs:      \"smart-tabs\",\r\n            tabSize:        \"tab-size\",\r\n            title:          \"title\",\r\n            toolbar:        \"toolbar\"\r\n        };\r\n        \r\n        private static $: JQueryStatic;\r\n        private element: JQuery;\r\n        private brush: string;\r\n        private config: Configuration;\r\n        private autoHighlight: boolean;\r\n        \r\n        constructor(element: JQuery, brush: string, config?: Configuration, autoHighlight?: boolean) {\r\n            \r\n            this.element = element;\r\n            this.brush = brush;\r\n            this.config = config;\r\n            this.autoHighlight = (autoHighlight == undefined ? true : autoHighlight);\r\n            \r\n        }\r\n        \r\n        public static Setup($: JQueryStatic): void {\r\n            \r\n            Highlighter.$ = $;\r\n            \r\n            $.fn.SyntaxHighlight = function (brush: string, config?: Configuration, autoHighlight?: boolean): any {\r\n                return this.each((index: number, element: Element) => {\r\n                    Highlighter.HighlightElement($(element), brush, config, autoHighlight);\r\n                });\r\n            };\r\n            \r\n        }\r\n        \r\n        public static HighlightElement(element: JQuery, brush: string, config?: Configuration, autoHighlight?: boolean): void {\r\n            \r\n            var highlighter = new Highlighter($(element), brush, config, autoHighlight);\r\n            highlighter.HighlightElement();\r\n            \r\n        }\r\n        \r\n        public HighlightElement(): void {\r\n            \r\n            var classes = this.getClasses();\r\n            classes.unshift(\"brush:\" + this.brush);\r\n            \r\n            Highlighter.$.each(classes, (index: number, value: string) => this.element.addClass(value));\r\n            \r\n            if (this.autoHighlight) {\r\n                SyntaxHighlighter.highlight(null, this.element[0]);\r\n            }\r\n            \r\n        }\r\n        \r\n        private getClasses(): string[] {\r\n            \r\n            var classes: string[] = [];\r\n            \r\n            if (this.config) {\r\n                Highlighter.$.each(this.config, (name: string, value: string | ((JQuery) => string)) => {\r\n                    var x = Highlighter.options[name];\r\n                    var c: string;\r\n                    \r\n                    if (x == undefined) {\r\n                        if (typeof value === \"function\") {\r\n                            c = value(this.element);\r\n                        }\r\n                        else {\r\n                            c = name + \":\" + value;\r\n                        }\r\n                    }\r\n                    else if (typeof x === \"function\") {\r\n                        c = x(value);\r\n                    }\r\n                    else {\r\n                        c = x + \":\" + value;\r\n                    }\r\n                    \r\n                    classes.push(c);\r\n                });\r\n            }\r\n            \r\n            return classes;\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}