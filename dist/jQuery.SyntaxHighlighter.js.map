{"version":3,"sources":["jQuery.SyntaxHighlighter.js","C:/Users/owashi/Documents/Visual Studio/Projects/jQuery.SyntaxHighlighter/jQuery.SyntaxHighlighter.ts"],"names":["root","factory","module","exports","require","define","amd","jQuery","this","$","JQuerySyntaxHighlighter","JQuerySyntaxHighlighter.Highlighter","JQuerySyntaxHighlighter.Highlighter.constructor","JQuerySyntaxHighlighter.Highlighter.Setup","each","index","element","Highlighter","HighlightElement","brush","config","autoHighlight","JQuerySyntaxHighlighter.Highlighter.HighlightElement","JQuerySyntaxHighlighter.Highlighter.getClasses","Setup"],"mappings":"CAAC,SAAUA,EAAMC,GACQ,gBAAVC,SAAgD,gBAAnBA,QAAOC,QAC3CF,EAAQG,QAAQ,WACS,gBAAXD,SACdF,EAAQG,QAAQ,WACS,kBAAXC,SAAyBA,OAAOC,IAC9CD,QAAQ,UAAWJ,GAEnBA,EAAQM,SAEdC,KAAM,SAAUC,GCRlB,GAAOC,IAAP,YAyBqBA,WAyBbC,QAzBEA,GAyBUA,EAAiBA,EAAeA,EAAuBA,GAE/DC,KAAKA,QAAUA,EACfA,KAAKA,MAAQA,EACbA,KAAKA,OAASA,EACdA,KAAKA,cAAkCA,QAAjBA,GAA6BA,EAAOA,EAoElED,MAhEWA,GAAAA,MAAPA,SAAaA,GAETE,EAAYA,EAAIA,EAEhBA,EAAEA,GAAGA,gBAAkBA,SAAUA,EAAeA,EAAuBA,GAEnE,MAAOL,MAAKM,KAAK,SAACC,EAAeC,GAE7BC,EAAYC,iBAAiBT,EAAEO,GAAUG,EAAOC,EAAQC,OAQ7DV,EAAAA,iBAAPA,SAAwBA,EAAiBA,EAAeA,EAAuBA,GAE3EW,GAAIA,GAAcA,GAAIA,GAAYA,EAAEA,GAAUA,EAAOA,EAAQA,EAC7DA,GAAYA,oBAIhBX,EAAAA,UAAAA,iBAAAA,WAAAW,GAAAA,GAAAA,KAEQA,EAAUA,KAAKA,YACnBA,GAAQA,QAAQA,SAAWA,KAAKA,OAEhCA,EAAYA,EAAEA,KAAKA,EAASA,SAACA,EAAeA,GAAkBA,MAAAA,GAAKA,QAAQA,SAASA,KAEhFA,KAAKA,eACLA,kBAAkBA,UAAUA,KAAMA,KAAKA,QAAQA,KAKvDX,EAAAA,UAAAA,WAAAA,WAAAY,GAAAA,GAAAA,KAEQA,IAwBJA,OAtBAA,GAAYA,EAAEA,KAAKA,KAAKA,OAAQA,SAACA,EAAcA,GAC3CA,GACIA,GADAA,EAAIA,EAAYA,QAAQA,EAKpBA,GAFCA,QAALA,EACoBA,kBAATA,GACkBA,EAAOA,EAAKA,SAGjCA,EAAOA,IAAMA,EAGJA,kBAALA,GACRA,EAAEA,GAGFA,EAAIA,IAAMA,EAGlBA,EAAQA,KAAKA,KAGVA,GA9FJZ,EAAAA,SACHA,UAAgBA,aAChBA,UAAgBA,aAChBA,SAAgBA,WAChBA,UAAgBA,aAChBA,OAAgBA,SAChBA,UAAgBA,SAACA,GAA4BA,MAAAA,cAAgBA,EAAMA,KAAKA,KAAOA,KAC/EA,WAAgBA,cAChBA,MAAgBA,QAChBA,eAAgBA,mBAChBA,UAAgBA,aAChBA,UAAgBA,aAChBA,QAAgBA,WAChBA,MAAgBA,QAChBA,QAAgBA,WAkFxBA,MA3HGD,IAAAA,ODmFHA,EAAwBO,YAAYO,MAAMf","file":"jQuery.SyntaxHighlighter.js","sourcesContent":[null,"/// <reference path=\"typings/jquery/jquery.d.ts\"/>\r\n\r\nmodule JQuerySyntaxHighlighter {\r\n    \r\n    interface sh {\r\n        highlight(params: any, element: HTMLElement);\r\n    }\r\n    \r\n    declare var SyntaxHighlighter: sh;\r\n    \r\n    export interface Configuration {\r\n        autoLinks:      boolean;\r\n        className:      string;\r\n        collapse:       boolean;\r\n        firstLine:      number;\r\n        gutter:         boolean;\r\n        highlight:      number[];\r\n        htmlScript:     boolean;\r\n        light:          boolean;\r\n        padLineNumbers: boolean | number;\r\n        quickCode:      boolean;\r\n        smartTabs:      boolean;\r\n        tabSize:        number;\r\n        title:          string;\r\n        toolbar:        boolean;\r\n    }\r\n    \r\n    class Highlighter {\r\n        \r\n        static options = {\r\n            autoLinks:      \"auto-links\",\r\n            className:      \"class-name\",\r\n            collapse:       \"collapse\",\r\n            firstLine:      \"first-line\",\r\n            gutter:         \"gutter\",\r\n            highlight:      (value: number[]): string => \"highlight:[\" + value.join(\",\") + \"]\",\r\n            htmlScript:     \"html-script\",\r\n            light:          \"light\",\r\n            padLineNumbers: \"pad-line-numbers\",\r\n            quickCode:      \"quick-code\",\r\n            smartTabs:      \"smart-tabs\",\r\n            tabSize:        \"tab-size\",\r\n            title:          \"title\",\r\n            toolbar:        \"toolbar\"\r\n        };\r\n        \r\n        static $: JQueryStatic;\r\n        element: JQuery;\r\n        brush: string;\r\n        config: Configuration;\r\n        autoHighlight: boolean;\r\n        \r\n        constructor(element: JQuery, brush: string, config: Configuration, autoHighlight: boolean) {\r\n            \r\n            this.element = element;\r\n            this.brush = brush;\r\n            this.config = config;\r\n            this.autoHighlight = (autoHighlight == undefined ? true : autoHighlight);\r\n            \r\n        }\r\n        \r\n        static Setup($: JQueryStatic): void {\r\n            \r\n            Highlighter.$ = $;\r\n            \r\n            $.fn.SyntaxHighlight = function (brush: string, config: Configuration, autoHighlight: boolean): any {\r\n                \r\n                return this.each((index: number, element: Element) => {\r\n                    \r\n                    Highlighter.HighlightElement($(element), brush, config, autoHighlight);\r\n                    \r\n                });\r\n                \r\n            };\r\n            \r\n        }\r\n        \r\n        static HighlightElement(element: JQuery, brush: string, config: Configuration, autoHighlight: boolean): void {\r\n            \r\n            var highlighter = new Highlighter($(element), brush, config, autoHighlight);\r\n            highlighter.HighlightElement();\r\n            \r\n        }\r\n        \r\n        HighlightElement(): void {\r\n            \r\n            var classes = this.getClasses();\r\n            classes.unshift(\"brush:\" + this.brush);\r\n            \r\n            Highlighter.$.each(classes, (index: number, value: string) => this.element.addClass(value));\r\n            \r\n            if (this.autoHighlight) {\r\n                SyntaxHighlighter.highlight(null, this.element[0]);\r\n            }\r\n            \r\n        }\r\n        \r\n        getClasses(): string[] {\r\n            \r\n            var classes: string[] = [];\r\n            \r\n            Highlighter.$.each(this.config, (name: string, value: string | ((JQuery) => string)) => {\r\n                var x = Highlighter.options[name];\r\n                var c: string;\r\n                \r\n                if (x == undefined) {\r\n                    if (typeof value == \"function\") {\r\n                        c = (<(JQuery) => string>value)(this.element);\r\n                    }\r\n                    else {\r\n                        c = name + \":\" + value;\r\n                    }\r\n                }\r\n                else if (typeof x == \"function\") {\r\n                    c = x(value);\r\n                }\r\n                else {\r\n                    c = x + \":\" + value;\r\n                }\r\n                \r\n                classes.push(c);\r\n            });\r\n            \r\n            return classes;\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}