{"version":3,"sources":["C:/Users/Kazu/Desktop/j/jQuery.SyntaxHighlighter.ts","jQuery.SyntaxHighlighter.js"],"names":["root","factory","define","amd","JQuerySyntaxHighlighter","module","JQuerySyntaxHighlighter.Highlighter","JQuerySyntaxHighlighter.Highlighter.constructor","this","Highlighter","JQuerySyntaxHighlighter.Highlighter.HighlightElement","JQuerySyntaxHighlighter.Highlighter.getClasses","$","each","_this","classes","quickCode","smartTabs","tabSize","title","highlight","brush","config","autoHighlight","index","element","highlighter","HighlightElement","fn","SyntaxHighlight","jQuery"],"mappings":"CAAA,SAAAA,EAAAC,GAEO,kBAAAC,SAoGNA,OAAAC,IApGDD,QAAO,UAAAD,GAyBqBG,gBAAAA,SCvBxBC,OD+CIC,QAxBSA,EAwBGA,QAAeA,WC7C/BN,EAAKI,wBDgDsBG,EAAAA,EAAAA,SC9C7BC,KAAM,WAER,GAAIJ,EA0EJ,OAzEA,UAAWA,GACP,GAAIK,GDkDQC,WCjDR,QDkDIA,GAAgBA,EAAQA,EAAQA,EAAOA,GAEvCA,KAAEA,QAAYA,EAEdA,KAAIA,MAAKA,ECnDTF,KDoDIE,OAAAA,EACJA,KAACA,cAAAA,QAAAA,GAAAA,EAAAA,ECDL,MDKQJ,GAAAA,UAAAA,iBAARA,WAAAK,GAAAA,GAAAA,KAEQA,EAAoBA,KAAGA,YAE3BA,GAAOA,QAAKA,SAAQA,KAACA,OCtDrBC,EAAEC,KDuDEF,EAAQA,SAAYA,EAAQA,GAAMA,MAAAA,GAAAA,QAAAA,SAAAA,KAClCA,KAAaA,eAEbA,kBAAkBA,UAAGA,KAAAA,KAAAA,QAAAA,KCrD7BF,EDwDYE,UAACA,WAAAA,WCvDT,GAAIG,GDwDQH,KCvDRI,IDMJT,OCLAM,GAAEC,KAAKL,KDwDEG,OAAAA,SAAAA,EAAAA,GACLA,GACIA,GADHA,EAAAA,EAAAA,QAAAA,EAIKA,GAFGA,QAALA,EACHA,kBAAAA,GACKA,EAAAA,EAAAA,SAIMA,EAAIA,IAAAA,EAIvBA,kBAAAA,GAvEML,EAAAA,GAGOA,EAAAA,IAAUA,EAEpBA,EAAQA,KAAQA,KAEhBA,GCgBJG,EDdIH,SACAA,UAAWA,aACXA,UAAWA,aACXA,SAASA,WACTA,UAAOA,aACPA,OAAOA,SACTA,UAAAA,SAAAA,GAAAA,MAAAA,cAAAA,EAAAA,KAAAA,KAAAA,KAyDNA,WAAAA,cAACF,MAAAA,QA1EYA,eAAAA,mBAzBVY,UAAA,aAsGmBC,UAAA,aAEtBC,QAAa,WAEbC,MAAS,QAELC,QAAYA,WAGRA,IAIRA,GAACA,YAAAA,GC9CFhB,ID8CGA,OC7CN,SD+CSQ,GAEN,YC/CC,SAASQ,GAAUC,EAAOC,EAAQC,GAC9B,MAAOf,MAAKK,KAAK,SAAUW,EAAOC,GAC9B,GAAIC,GAAc,GAAItB,GAAwBK,YAAYG,EAAEa,GAAUJ,EAAOC,EAAQC,EACrFG,GAAYC,qBAIpBf,EAAEgB,GAAGC,gBAAkBT,GACxBU,QAEI1B","file":"jQuery.SyntaxHighlighter.js","sourcesContent":["/// <reference path=\"typings/jquery/jquery.d.ts\"/>\r\n\r\nmodule JQuerySyntaxHighlighter {\r\n    \r\n    interface sh {\r\n        highlight(params: any, element: HTMLElement);\r\n    }\r\n    \r\n    declare var SyntaxHighlighter: sh;\r\n    \r\n    export interface SyntaxHighlighterConfiguration {\r\n        autoLinks:\tboolean;\r\n        className:\tstring;\r\n        collapse:\tboolean;\r\n        firstLine:\tnumber;\r\n        gutter:\t\tboolean;\r\n        highlight:\tnumber[];\r\n        htmlScript:\tboolean;\r\n        light:\t\tboolean;\r\n        padLineNumbers:\tboolean | number;\r\n        quickCode:\tboolean;\r\n        smartTabs:\tboolean;\r\n        tabSize:\tnumber;\r\n        title:\t\tstring;\r\n        toolbar:\tboolean;\r\n    }\r\n    \r\n    export class Highlighter {\r\n        \r\n        static options = {\r\n            autoLinks: \"auto-links\",\r\n            className: \"class-name\",\r\n            collapse: \"collapse\",\r\n            firstLine: \"first-line\",\r\n            gutter: \"gutter\",\r\n            highlight: (value: number[]): string => \"highlight:[\" + value.join(\",\") + \"]\",\r\n            htmlScript: \"html-script\",\r\n            light: \"light\",\r\n            padLineNumbers: \"pad-line-numbers\",\r\n            quickCode: \"quick-code\",\r\n            smartTabs: \"smart-tabs\",\r\n            tabSize: \"tab-size\",\r\n            title: \"title\",\r\n            toolbar: \"toolbar\"\r\n        };\r\n        \r\n        private element: JQuery;\r\n        private brush: string;\r\n        private config: SyntaxHighlighterConfiguration;\r\n        private autoHighlight: boolean;\r\n        \r\n        constructor(element: JQuery, brush: string, config: SyntaxHighlighterConfiguration, autoHighlight: boolean) {\r\n            \r\n            this.element = element;\r\n            this.brush = brush;\r\n            this.config = config;\r\n            this.autoHighlight = (autoHighlight == undefined ? true : autoHighlight);\r\n            \r\n        }\r\n        \r\n        public HighlightElement(): void {\r\n            \r\n            var classes = this.getClasses();\r\n            classes.unshift(\"brush:\" + this.brush);\r\n            \r\n            $.each(classes, (index: number, value: string) => this.element.addClass(value));\r\n            \r\n            if (this.autoHighlight) {\r\n                SyntaxHighlighter.highlight(null, this.element[0]);\r\n            }\r\n            \r\n        }\r\n        \r\n        private getClasses(): string[] {\r\n            \r\n            var classes: string[] = [];\r\n            \r\n            $.each(this.config, (name: string, value: string | ((JQuery) => string)) => {\r\n                var x = Highlighter.options[name];\r\n                var c: string;\r\n                \r\n                if (x == undefined) {\r\n                    if (typeof value == \"function\") {\r\n                        c = (<(JQuery) => string>value)(this.element);\r\n                    }\r\n                    else {\r\n                        c = name + \":\" + value;\r\n                    }\r\n                }\r\n                else if (typeof x == \"function\") {\r\n                    c = x(value);\r\n                }\r\n                else {\r\n                    c = x + \":\" + value;\r\n                }\r\n                \r\n                classes.push(c);\r\n            });\r\n            \r\n            return classes;\r\n        }\r\n    }\r\n}\r\n\r\n(function ($: JQueryStatic) {\r\n    \r\n    \"use strict\";\r\n    \r\n    function highlight(brush: string, config: JQuerySyntaxHighlighter.SyntaxHighlighterConfiguration, autoHighlight: boolean): any {\r\n        \r\n        return this.each((index: number, element: Element) => {\r\n            \r\n            var highlighter = new JQuerySyntaxHighlighter.Highlighter($(element), brush, config, autoHighlight);\r\n            highlighter.HighlightElement();\r\n            \r\n        });\r\n        \r\n    };\r\n    \r\n    $.fn.SyntaxHighlight = highlight;\r\n\r\n})(jQuery);\r\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('jquery'));\n  } else {\n    root.B = factory(root.jquery);\n  }\n}(this, function(jquery) {\n/// <reference path=\"typings/jquery/jquery.d.ts\"/>\nvar JQuerySyntaxHighlighter;\n(function (JQuerySyntaxHighlighter) {\n    var Highlighter = (function () {\n        function Highlighter(element, brush, config, autoHighlight) {\n            this.element = element;\n            this.brush = brush;\n            this.config = config;\n            this.autoHighlight = (autoHighlight == undefined ? true : autoHighlight);\n        }\n        Highlighter.prototype.HighlightElement = function () {\n            var _this = this;\n            var classes = this.getClasses();\n            classes.unshift(\"brush:\" + this.brush);\n            $.each(classes, function (index, value) { return _this.element.addClass(value); });\n            if (this.autoHighlight) {\n                SyntaxHighlighter.highlight(null, this.element[0]);\n            }\n        };\n        Highlighter.prototype.getClasses = function () {\n            var _this = this;\n            var classes = [];\n            $.each(this.config, function (name, value) {\n                var x = Highlighter.options[name];\n                var c;\n                if (x == undefined) {\n                    if (typeof value == \"function\") {\n                        c = value(_this.element);\n                    }\n                    else {\n                        c = name + \":\" + value;\n                    }\n                }\n                else if (typeof x == \"function\") {\n                    c = x(value);\n                }\n                else {\n                    c = x + \":\" + value;\n                }\n                classes.push(c);\n            });\n            return classes;\n        };\n        Highlighter.options = {\n            autoLinks: \"auto-links\",\n            className: \"class-name\",\n            collapse: \"collapse\",\n            firstLine: \"first-line\",\n            gutter: \"gutter\",\n            highlight: function (value) { return \"highlight:[\" + value.join(\",\") + \"]\"; },\n            htmlScript: \"html-script\",\n            light: \"light\",\n            padLineNumbers: \"pad-line-numbers\",\n            quickCode: \"quick-code\",\n            smartTabs: \"smart-tabs\",\n            tabSize: \"tab-size\",\n            title: \"title\",\n            toolbar: \"toolbar\"\n        };\n        return Highlighter;\n    })();\n    JQuerySyntaxHighlighter.Highlighter = Highlighter;\n})(JQuerySyntaxHighlighter || (JQuerySyntaxHighlighter = {}));\n(function ($) {\n    \"use strict\";\n    function highlight(brush, config, autoHighlight) {\n        return this.each(function (index, element) {\n            var highlighter = new JQuerySyntaxHighlighter.Highlighter($(element), brush, config, autoHighlight);\n            highlighter.HighlightElement();\n        });\n    }\n    ;\n    $.fn.SyntaxHighlight = highlight;\n})(jQuery);\n\nreturn A;\n}));\n\n//# sourceMappingURL=jQuery.SyntaxHighlighter.js.map"],"sourceRoot":"/source/"}